FUNCTION AFTER_OK(ok_2[],close_btn[])
//エラーへの対応状況：処理の中断の理由は、①キャラのLBのCLASSUP、②称号の獲得 の2つが想定
//対応方法：
//                ①：各ウィンドゥの処理で失敗した際に「CLOSE」ボタンを探す処理を実行することで対応
//                ②：①の対応処理が失敗した際に画面をクリックすることで対応
//その他：
//                    各ウィンドウへの処理は5回繰り返し、全て失敗した場合はエラーを出力して次のウィンドウの処理へ進む
//                    強制終了せず次の処理に進むのは、前周の処理が中途半端に終わっていた際に復旧する可能性があるからである。
//============変数の説明====================================

	//OKを探してクリックする
		i = 0
		WHILE i < 3
			i = i + 1
			RC = PUSH_BUTTON(ok_2)
			IFB RC = 0
				BREAK
			ENDIF

		//CLOSE対策
			RC = PUSH_BUTTON(close_btn)
			IFB RC = 0
				continue
			ENDIF

		//CLASSUP対策
			BTN(LEFT,CLICK)

		//エラー時の報告
			IFB i = 3
				ERROR_Pattern3("OK","戦闘後のOKボタンが見つかりません")
				RESULT = 99
				EXIT
			ENDIF
		WEND
		RESULT = 0

FEND

FUNCTION AFTER_MORE(ok_2[],close_btn[],more[])
	//もう一度を探してクリックする。

		i = 0
		WHILE i < 5
			i = i + 1
			RC = PUSH_BUTTON(more)
			IFB RC = 0
				BREAK
			ENDIF

		//OKの確認画面
			RC = PUSH_BUTTON(ok_2)
			IFB RC = 0
				continue
			ENDIF

		//称号の確認画面
			RC = PUSH_BUTTON(close_btn)
			IFB RC = 0
				continue
			ENDIF

		//CLASSUP対策
			BTN(LEFT,CLICK)

		//一定回数ループしたら異常終了
			IFB i = 5
				ERROR_Pattern3("more","戦闘後のもう一度ボタンが見つかりません")
				RESULT = 99
				EXIT
			ENDIF
		WEND

		RESULT = 0

FEND



FUNCTION AFTER_PTN1(ok_1[],ok_2[],more[],close_btn[])
//===========関数の説明=====================================
//想定処理：古戦場の戦闘後
//          戦貨獲得のウィンドウから、「もう一度」ボタンをクリックするところまで
//処理の流れ：戦貨→経験値獲得→→「もう一度」ボタンを押す。
//エラーへの対応状況：処理の中断の理由は、①キャラのLBのCLASSUP、②称号の獲得 の2つが想定
//対応方法：
//                ①：各ウィンドゥの処理で失敗した際に「CLOSE」ボタンを探す処理を実行することで対応
//                ②：①の対応処理が失敗した際に画面をクリックすることで対応
//その他：
//                    各ウィンドウへの処理は5回繰り返し、全て失敗した場合はエラーを出力して次のウィンドウの処理へ進む
//                    強制終了せず次の処理に進むのは、前周の処理が中途半端に終わっていた際に復旧する可能性があるからである。
//============変数の説明====================================
//ok_1		:戦闘直後のOKの判定用
//ok_2		:ok_1以外のOK判定用、もしくはok_1の周回用
//more		:もう一度 の判定用　周回する場合は基本的にこれを使う
//close_btn	:称号獲得時等のポップ対策

i = 0

	//OKを探してクリックする
		i = 0
		WHILE i < 5
			i = i + 1
			RC = PUSH_BUTTON(ok_2)
			IFB RC = 0
				BREAK
			ENDIF

		//CLOSE対策
			RC = PUSH_BUTTON(close_btn)
			IFB RC = 0
				continue
			ENDIF

		//CLASSUP対策
			BTN(LEFT,CLICK)

		//エラー時の報告
			IFB i = 3
				ERROR_Pattern3("OK","戦闘後のOKボタンが見つかりません")
			ENDIF
		WEND

	//OKを探してクリックする
		i = 0
		WHILE i < 5
			i = i + 1
			RC = PUSH_BUTTON(ok_2)
			IFB RC = 0
				BREAK
			ENDIF

		//CLOSE対策
			RC = PUSH_BUTTON(close_btn)
			IFB RC = 0
				continue
			ENDIF

		//CLASSUP対策
			BTN(LEFT,CLICK)

		//エラー時の報告
			IFB i = 3
				ERROR_Pattern3("OK","戦闘後のOKボタンが見つかりません")
			ENDIF
		WEND

	//もう一度を探してクリックする。

		i = 0
		WHILE i < 5
			i = i + 1
			RC = PUSH_BUTTON(more)
			IFB RC = 0
				BREAK
			ENDIF

		//OKの確認画面
			RC = PUSH_BUTTON(ok_2)
			IFB RC = 0
				continue
			ENDIF

		//称号の確認画面
			RC = PUSH_BUTTON(close_btn)
			IFB RC = 0
				continue
			ENDIF

		//CLASSUP対策
			BTN(LEFT,CLICK)

		//一定回数ループしたら異常終了
			IFB i = 5
				ERROR_Pattern3("more","戦闘後のもう一度ボタンが見つかりません")
				RESULT = 99
				EXIT
			ENDIF
		WEND

	//称号の確認画面
		RC = PUSH_BUTTON(close_btn)

		RESULT = 0
FEND

FUNCTION AFTER_PTN2(ok_1[],ok_2[],more[],close_btn[],reward[],2top[],multi[],level[])
//===========関数の説明=====================================
//想定処理：ストーリーイベントの戦闘後
//          戦貨獲得のウィンドウから、「もう一度」ボタンをクリックするところまで
//処理の流れ：戦貨→経験値獲得→→「もう一度」ボタンを押す。←ここまではPTN1と同じ
//            「もう一度」ボタンを押した後、HELL出現時の処理を追加
//エラーへの対応状況：処理の中断の理由は、①キャラのLBのCLASSUP、②称号の獲得 の2つが想定
//対応方法：
//                ①：各ウィンドゥの処理で失敗した際に「CLOSE」ボタンを探す処理を実行することで対応
//                ②：①の対応処理が失敗した際に画面をクリックすることで対応
//その他：
//                    各ウィンドウへの処理は5回繰り返し、全て失敗した場合はエラーを出力して次のウィンドウの処理へ進む
//                    強制終了せず次の処理に進むのは、前周の処理が中途半端に終わっていた際に復旧する可能性があるからである。
//============変数の説明====================================
//ok_1		:戦闘直後のOKの判定用
//ok_2		:ok_1以外のOK判定用、もしくはok_1の周回用
//more		:もう一度 の判定用　周回する場合は基本的にこれを使う
//close_btn	:称号獲得時等のポップ対策

i = 0

	//OKを探してクリックする
		i = 0
		WHILE i < 5
			i = i + 1
			RC = PUSH_BUTTON(ok_2)
			IFB RC = 0
				BREAK
			ENDIF

		//CLOSE対策
			RC = PUSH_BUTTON(close_btn)
			IFB RC = 0
				continue
			ENDIF

		//CLASSUP対策
			BTN(LEFT,CLICK)

		//エラー時の報告
			IFB i = 3
				ERROR_Pattern3("OK","戦闘後のOKボタンが見つかりません")
			ENDIF
		WEND

	//OKを探してクリックする
		i = 0
		WHILE i < 5
			i = i + 1
			RC = PUSH_BUTTON(ok_2)
			IFB RC = 0
				BREAK
			ENDIF

		//CLOSE対策
			RC = PUSH_BUTTON(close_btn)
			IFB RC = 0
				continue
			ENDIF

		//CLASSUP対策
			BTN(LEFT,CLICK)

		//エラー時の報告
			IFB i = 3
				ERROR_Pattern3("OK","戦闘後のOKボタンが見つかりません")
			ENDIF
		WEND

	//もう一度を探してクリックする。

		i = 0
		WHILE i < 5
			i = i + 1
			RC = PUSH_BUTTON(more)
			IFB RC = 0
				BREAK
			ENDIF

		//OKの確認画面
			RC = PUSH_BUTTON(ok_2)
			IFB RC = 0
				continue
			ENDIF

		//称号の確認画面
			RC = PUSH_BUTTON(close_btn)
			IFB RC = 0
				continue
			ENDIF

		//CLASSUP対策
			BTN(LEFT,CLICK)

		//一定回数ループしたら異常終了
			IFB i = 5
				ERROR_Pattern3("more","戦闘後のもう一度ボタンが見つかりません")
				RESULT = 99
				EXIT
			ENDIF
		WEND

	//称号の確認画面
//		RC = PUSH_BUTTON(close_btn)
		

//=======================================================================
	//特殊ボスの出現画面が出ていた場合の処理
		IFB CHECK_BUTONN(reward) = 0
			
		//Rewardの取得
			RC = PUSH_BUTTON(reward)


		WHILE i < 5
			i = i + 1
			RC = PUSH_BUTTON(ok_2)
			
			IFB RC = 0
				BREAK
			ENDIF

		//CLASSUP対策
			BTN(LEFT,CLICK)
			
		WEND
			
		WHILE i < 5
			i = i + 1	
				RC = PUSH_BUTTON(ok_2)
				IFB RC = 0
					BREAK
				ENDIF
		//CLASSUP対策
				BTN(LEFT,CLICK)
				i = i + 1
		WEND

			IFB RC = 99
				ERROR_Pattern4
			ENDIF



	//イベントTOPへ移動
			RC = PUSH_BUTTON(2top)
			IFB RC = 99
				RESLUT = 99
				ERROR_Pattern3("2top","TOP画面へ遷移できません")				
				EXIT
			ENDIF

	//イベントのマルチバトル　を探してクリックする
			RC = PUSH_BUTTON(multi)
			IFB RC = 99
				RESLUT = 99
				ERROR_Pattern3("multi","multi戦闘を選択できません")				
				EXIT
			ENDIF

	//マルチバトルの難易度選択　を探してクリックする
			RC = PUSH_BUTTON(level)
			IFB RC = 99
				RESLUT = 99
				ERROR_Pattern3("level","難易度選択が出来ません")				
				EXIT
			ENDIF

		ENDIF
//=======================================================================

		RESULT = 0
FEND


FUNCTION AFTER_PTN3(ok_1[],ok_2[],more[],close_btn[],reward[],2top[],multi[],level[])
//===========関数の説明=====================================
//想定処理：ゼノイベントの戦闘後
//          経験値獲得のウィンドウから、「もう一度」ボタンをクリックするところまで
//処理の流れ：経験値獲得→→「もう一度」ボタンを押す。
//            「もう一度」ボタンを押した後、HELL出現時の処理を追加
//エラーへの対応状況：処理の中断の理由は、①キャラのLBのCLASSUP、②称号の獲得 の2つが想定
//対応方法：
//                ①：各ウィンドゥの処理で失敗した際に「CLOSE」ボタンを探す処理を実行することで対応
//                ②：①の対応処理が失敗した際に画面をクリックすることで対応
//その他：
//                    各ウィンドウへの処理は5回繰り返し、全て失敗した場合はエラーを出力して次のウィンドウの処理へ進む
//                    強制終了せず次の処理に進むのは、前周の処理が中途半端に終わっていた際に復旧する可能性があるからである。
//============変数の説明====================================
//ok_1		:戦闘直後のOKの判定用
//ok_2		:ok_1以外のOK判定用、もしくはok_1の周回用
//more		:もう一度 の判定用　周回する場合は基本的にこれを使う
//close_btn	:称号獲得時等のポップ対策

i = 0


	//OKを探してクリックする
		AFTER_OK(ok_2,close_btn)

	//もう一度を探してクリックする。

		i = 0
		WHILE i < 5
			i = i + 1
			RC = PUSH_BUTTON(more)
			IFB RC = 0
				BREAK
			ENDIF

		//OKの確認画面
			RC = PUSH_BUTTON(ok_2)
			IFB RC = 0
				continue
			ENDIF

		//称号の確認画面
			RC = PUSH_BUTTON(close_btn)
			IFB RC = 0
				continue
			ENDIF

		//CLASSUP対策
			BTN(LEFT,CLICK)

		//一定回数ループしたら異常終了
			IFB i = 5
				ERROR_Pattern3("more","戦闘後のもう一度ボタンが見つかりません")
				RESULT = 99
				EXIT
			ENDIF
		WEND

	//称号の確認画面
		RC = PUSH_BUTTON(close_btn)


//=======================================================================
	//特殊ボスの出現画面が出ていた場合の処理
		IFB CHECK_BUTONN(reward) = 0

		//Rewardの取得
			RC = PUSH_BUTTON(reward)
			AFTER_OK(ok_2,close_btn)
			
	//イベントTOPへ移動
			RC = PUSH_BUTTON(2top)
			IFB RC = 99
				RESLUT = 99
				ERROR_Pattern3("2top","TOP画面へ遷移できません")				
				EXIT
			ENDIF
			
	//イベントのマルチバトル　を探してクリックする
			RC = PUSH_BUTTON(multi)
			IFB RC = 99
				RESLUT = 99
				ERROR_Pattern3("multi","multi戦闘を選択できません")				
				EXIT
			ENDIF

	//マルチバトルの難易度選択　を探してクリックする
			RC = PUSH_BUTTON(level)
			IFB RC = 99
				RESLUT = 99
				ERROR_Pattern3("level","難易度選択が出来ません")				
				EXIT
			ENDIF

		ENDIF
//=======================================================================

		RESULT = 0
FEND

FUNCTION AFTER_PTN4(ok_1[],ok_2[],more[],close_btn[])
//===========関数の説明=====================================
//想定処理：キャンペーンクエストの戦闘後
//          経験値獲得のウィンドウから、「もう一度」ボタンをクリックするところまで
//処理の流れ：経験値獲得→→「もう一度」ボタンを押す。
//
//============変数の説明====================================
//ok_1		:戦闘直後のOKの判定用
//ok_2		:ok_1以外のOK判定用、もしくはok_1の周回用
//more		:もう一度 の判定用　周回する場合は基本的にこれを使う
//close_btn	:称号獲得時等のポップ対策

i = 0


	//OKを探してクリックする
		AFTER_OK(ok_2,close_btn)

	//もう一度を探してクリックする。
		AFTER_MORE(ok_2,close_btn,more)

	//称号の確認画面
		RC = PUSH_BUTTON(close_btn)


		RESULT = 0
FEND

FUNCTION AFTER_PTN21(ok_1[],ok_2[],more[],close_btn[],reward[],2top[],multi[],level[],base[])
//===========関数の説明=====================================
//想定処理：ストーリーイベントの戦闘後
//          戦貨獲得のウィンドウから、「もう一度」ボタンをクリックするところまで
//処理の流れ：戦貨→経験値獲得→→「もう一度」ボタンを押す。←ここまではPTN1と同じ
//            「もう一度」ボタンを押した後、HELL出現時の処理を追加
//エラーへの対応状況：処理の中断の理由は、①キャラのLBのCLASSUP、②称号の獲得 の2つが想定
//対応方法：
//                ①：各ウィンドゥの処理で失敗した際に「CLOSE」ボタンを探す処理を実行することで対応
//                ②：①の対応処理が失敗した際に画面をクリックすることで対応
//その他：
//                    各ウィンドウへの処理は5回繰り返し、全て失敗した場合はエラーを出力して次のウィンドウの処理へ進む
//                    強制終了せず次の処理に進むのは、前周の処理が中途半端に終わっていた際に復旧する可能性があるからである。
//============変数の説明====================================
//ok_1		:戦闘直後のOKの判定用
//ok_2		:ok_1以外のOK判定用、もしくはok_1の周回用
//more		:もう一度 の判定用　周回する場合は基本的にこれを使う
//close_btn	:称号獲得時等のポップ対策

i = 0

	//OKを探してクリックする
		i = 0
		WHILE i < 5
			i = i + 1
			RC = PUSH_BUTTON(ok_2)
			IFB RC = 0
				BREAK
			ENDIF

		//CLOSE対策
			RC = PUSH_BUTTON(close_btn)
			IFB RC = 0
				continue
			ENDIF

		//CLASSUP対策
			BTN(LEFT,CLICK)

		//エラー時の報告
			IFB i = 3
				ERROR_Pattern3("OK","戦闘後のOKボタンが見つかりません")
			ENDIF
		WEND

	//OKを探してクリックする
		i = 0
		WHILE i < 5
			i = i + 1
			RC = PUSH_BUTTON(ok_2)
			IFB RC = 0
				BREAK
			ENDIF

		//CLOSE対策
			RC = PUSH_BUTTON(close_btn)
			IFB RC = 0
				continue
			ENDIF

		//CLASSUP対策
			BTN(LEFT,CLICK)

		//エラー時の報告
			IFB i = 3
				ERROR_Pattern3("OK","戦闘後のOKボタンが見つかりません")
			ENDIF
		WEND

	//もう一度を探してクリックする。

		i = 0
		WHILE i < 5
			i = i + 1
			RC = PUSH_BUTTON(more)
			IFB RC = 0
				BREAK
			ENDIF

		//OKの確認画面
			RC = PUSH_BUTTON(ok_2)
			IFB RC = 0
				continue
			ENDIF

		//称号の確認画面
			RC = PUSH_BUTTON(close_btn)
			IFB RC = 0
				continue
			ENDIF

		//CLASSUP対策
			BTN(LEFT,CLICK)

		//一定回数ループしたら異常終了
			IFB i = 5
				ERROR_Pattern3("more","戦闘後のもう一度ボタンが見つかりません")
				RESULT = 99
				EXIT
			ENDIF
		WEND
WRITEINI(base[0],"報酬",1, base[1])
	//称号の確認画面
		RC = PUSH_BUTTON(close_btn)
			

//=======================================================================
	//特殊ボスの出現画面が出ていた場合の処理
		IFB CHECK_BUTONN(reward) = 0
			A = READ_INI(base[0],"報酬", base[1])
			A = A + 1
			WRITEINI(base[0],"報酬",A, base[1])
		//Rewardの取得
			RC = PUSH_BUTTON(reward)


		WHILE i < 5
			i = i + 1
			RC = PUSH_BUTTON(ok_2)
			
			IFB RC = 0
				BREAK
			ENDIF

		//CLASSUP対策
			BTN(LEFT,CLICK)
			
		WEND
			
		WHILE i < 5
			i = i + 1	
				RC = PUSH_BUTTON(ok_2)
				IFB RC = 0
					BREAK
				ENDIF
		//CLASSUP対策
				BTN(LEFT,CLICK)
				i = i + 1
		WEND

			IFB RC = 99
				ERROR_Pattern4
			ENDIF



	//イベントTOPへ移動
			RC = PUSH_BUTTON(2top)
			IFB RC = 99
				RESLUT = 99
				ERROR_Pattern3("2top","TOP画面へ遷移できません")				
				EXIT
			ENDIF

	//イベントのマルチバトル　を探してクリックする
			RC = PUSH_BUTTON(multi)
			IFB RC = 99
				RESLUT = 99
				ERROR_Pattern3("multi","multi戦闘を選択できません")				
				EXIT
			ENDIF

	//マルチバトルの難易度選択　を探してクリックする
			RC = PUSH_BUTTON(level)
			IFB RC = 99
				RESLUT = 99
				ERROR_Pattern3("level","難易度選択が出来ません")				
				EXIT
			ENDIF

		ENDIF
//=======================================================================

		RESULT = 0
FEND


FUNCTION AFTER_PTN5(ok_1[],ok_2[],more[],close_btn[])
//===========関数の説明=====================================
//想定処理：ブレグラの戦闘後
//          経験値獲得のウィンドウから、「もう一度」ボタンをクリックするところまで
//処理の流れ：経験値獲得→→「もう一度」ボタンを押す。
//
//============変数の説明====================================
//ok_1		:戦闘直後のOKの判定用
//ok_2		:ok_1以外のOK判定用、もしくはok_1の周回用
//more		:もう一度 の判定用　周回する場合は基本的にこれを使う
//close_btn	:称号獲得時等のポップ対策

i = 0

	//OKを探してクリックする
		AFTER_OK(ok_1,close_btn)

	//もう一度を探してクリックする。
		AFTER_MORE(ok_2,close_btn,more)

	//称号の確認画面
		RC = PUSH_BUTTON(close_btn)

	//OKを探してクリックする
		AFTER_OK(ok_2,close_btn)

		RESULT = 0
FEND



FUNCTION AFTER_PTN6(use[],friend[],ok_1[],ok_2[],ok_3[],ok_4[],more[],close_btn[],charange[],2top_ev[],4sho_ex[],4sho_ex2[],4sho_trg[],kyuen[],c_kyuen[],full[])
//===========関数の説明=====================================
//想定処理：四象降臨の戦闘後
//          経験値獲得のウィンドウから、「もう一度」ボタンをクリックするところまで
//処理の流れ：経験値獲得→→「もう一度」ボタンを押す。
//
//============変数の説明====================================
//ok_1		:戦闘直後のOKの判定用
//ok_2		:ok_1以外のOK判定用、もしくはok_1の周回用
//more		:もう一度 の判定用　周回する場合は基本的にこれを使う
//close_btn	:称号獲得時等のポップ対策

i = 0

	//OKを探してクリックする
		AFTER_OK(ok_1,close_btn)

	//OKを探してクリックする
		AFTER_OK(ok_1,close_btn)

	//もう一度を探してクリックする。
		AFTER_MORE(ok_2,close_btn,more)
	//称号の確認画面
		RC = PUSH_BUTTON(close_btn)
		
	//なんか出たとき用
		IFB CHECK_BUTONN(charange) = 0
			RC = PUSH_BUTTON(charange)
		//フレンドを探してクリックする
			RC = APandFRIEND(use,friend,ok_3,ok_4)
		
		//フレンド選択画面でエラーになった場合、高確率で認証が出ているので、
		//メール連絡をして処理を強制終了
			IFB RC = 99
				ERROR_Pattern1("認証の可能性有","フレンド選択でエラー発生")

				EXITEXIT
			ENDIF
		
		//戦闘関係
			RC = BATTLE_EX(full,ok_4,kyuen,c_kyuen)

		//事後のOK
			AFTER_OK(ok_1,close_btn)
			AFTER_OK(ok_1,close_btn)
			RC = PUSH_BUTTON(2top_ev)
			sleep(2)
			BTN(WHEEL, -2)
			RC = PUSH_BUTTON(4sho_ex)
			IFB RC = 99 
				RC = PUSH_BUTTON(4sho_ex2)
			ENDIF
			RC = PUSH_BUTTON(4sho_trg)
		ENDIF
RESULT = RC
FEND

FUNCTION AFTER_PTN7(ok_4[],more[],close_btn[])
//===========関数の説明=====================================
//想定処理：エクストラクエスト周回用
//          経験値獲得のウィンドウから、「もう一度」ボタンをクリックするところまで
//処理の流れ：経験値獲得→→「もう一度」ボタンを押す。
//
//============変数の説明====================================
//ok_4		:戦闘直後のOKの判定用
//more		:もう一度 の判定用　周回する場合は基本的にこれを使う
//close_btn	:称号獲得時等のポップ対策

i = 0

	//OKを探してクリックする
		AFTER_OK(ok_4,close_btn)

	//もう一度を探してクリックする。
		AFTER_MORE(ok_4,close_btn,more)

	//称号の確認画面
		RC = PUSH_BUTTON(close_btn)


		RESULT = 0
FEND
